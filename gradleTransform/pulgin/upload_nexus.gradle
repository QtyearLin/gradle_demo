apply plugin: 'maven'
apply plugin: 'groovy'
apply plugin: 'java'
//apply plugin: 'com.android.library'


def isReleaseBuild() {
    return VERSION_NAME.toUpperCase().contains("SNAPSHOT") == false
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

println "在构建SUB文件：$project.VERSION_NAME"
//println "在构建SUB文件：$android.defaultConfig.versionName"

def getRepositoryUrl() {
    return isReleaseBuild() ? RELEASE_REPOSITORY_URL : SNAPSHOT_REPOSITORY_URL
}


afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME
                repository(url: getRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
//                snapshotRepository(url: SNAPSHOT_REPOSITORY_URL) {
//                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
//                }
            }
        }
    }

//    // 将源码打包发布
  /*  task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    // 将类说明文档打包发布
    tasks.withType(Javadoc) {
        // 设置编码
        options.encoding = 'UTF-8'
    }
    task androidJavadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        destinationDir = file("./javadoc/")
        // 忽略错误
        failOnError false
    }
    task androidJavadocJar(type: Jar, dependsOn: androidJavadoc) {
        classifier = 'javadoc'
        from androidJavadoc.destinationDir
    }

    artifacts {
        archives androidSourcesJar
        archives androidJavadocJar
    }*/
}